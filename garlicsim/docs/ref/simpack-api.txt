.. _ref-simpack-api:

===========
Simpack API
===========

(This document is still incomplete.)
   
There are only two mandatory definitions that a simpack has to make: A ``State``
class and a step function. There are several different kinds of step functions,
as will be detailed below. Defining just one is sufficient.

All of the other definitions are optional, and provide added functionality.

Most of the step functions (and some of the other definitions) should be defined
as methods of the ``State`` class.


Step functions
==============

* ``State.step(self, *args, **kwargs)`` - This is the simple step function,
  which takes a state and returns a state that follows it in time.

* ``State.step_generator(self, *args, **kwargs)`` - This works similarly to the
  simple step function, except it's a step generator. This means that instead of
  returning one state, it yields new states repeatedly.

* ``history_step(history_browser, *args, **kwargs)`` - A simple history step is
  like a normal simple step, except it's intended for history-dependent
  simulations only, and thus does not receive a state but an object called an
  history browser. A history browser is a device for obtaining states from the
  history of the simulation.

* ``history_step_generator(history_browser, *args, **kwargs)`` - A history
  step function that yields new states repeatedly similiarly to a
  ``step_generator``.


Other definitions
=================

* ``State.create_root(*args, **kwargs)`` - Create a plain state, i.e. a state
  which is empty and featureless, like an empty canvas.

* ``State.create_messy_root(*args, **kwargs)`` - Create a messy state, i.e. a
  state which is random and has interesting features. This is mainly intended
  for testing the simulation.

